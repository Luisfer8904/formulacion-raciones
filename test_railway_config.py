#!/usr/bin/env python3
"""
Script de prueba para verificar la configuraci√≥n de Railway
Ejecutar despu√©s del despliegue para validar que todo funcione
"""
import os
import requests
import json
from datetime import datetime

def test_health_endpoint(base_url):
    """Prueba el endpoint de health check"""
    print("üîç Probando endpoint de health check...")
    
    try:
        response = requests.get(f"{base_url}/health", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Health check exitoso:")
            print(f"   Status: {data.get('status')}")
            print(f"   Database: {data.get('database')}")
            print(f"   Email configurado: {data.get('environment', {}).get('email_configured')}")
            print(f"   SendGrid configurado: {data.get('environment', {}).get('sendgrid_configured')}")
            return True
        else:
            print(f"‚ùå Health check fall√≥: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error al probar health check: {e}")
        return False

def test_email_config():
    """Prueba la configuraci√≥n de email localmente"""
    print("\nüîç Verificando configuraci√≥n de email...")
    
    # Variables cr√≠ticas
    sendgrid_key = os.getenv('SENDGRID_API_KEY')
    sendgrid_email = os.getenv('SENDGRID_FROM_EMAIL')
    webhook_url = os.getenv('EMAIL_WEBHOOK_URL')
    sender_email = os.getenv('SENDER_EMAIL')
    
    print(f"   SENDGRID_API_KEY: {'‚úÖ Configurado' if sendgrid_key else '‚ùå No configurado'}")
    print(f"   SENDGRID_FROM_EMAIL: {'‚úÖ Configurado' if sendgrid_email else '‚ùå No configurado'}")
    print(f"   EMAIL_WEBHOOK_URL: {'‚úÖ Configurado' if webhook_url else '‚ö†Ô∏è No configurado (opcional)'}")
    print(f"   SENDER_EMAIL (respaldo): {'‚úÖ Configurado' if sender_email else '‚ùå No configurado'}")
    
    # Verificar que al menos un m√©todo est√© configurado
    if sendgrid_key or webhook_url or sender_email:
        print("‚úÖ Al menos un m√©todo de email est√° configurado")
        return True
    else:
        print("‚ùå Ning√∫n m√©todo de email est√° configurado")
        return False

def test_sendgrid_api():
    """Prueba la API de SendGrid si est√° configurada"""
    print("\nüîç Probando conexi√≥n con SendGrid...")
    
    api_key = os.getenv('SENDGRID_API_KEY')
    if not api_key:
        print("‚ö†Ô∏è SENDGRID_API_KEY no configurado, saltando prueba")
        return False
    
    try:
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
        # Probar endpoint de verificaci√≥n de SendGrid
        response = requests.get(
            "https://api.sendgrid.com/v3/user/account",
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ Conexi√≥n con SendGrid exitosa")
            return True
        else:
            print(f"‚ùå Error en SendGrid: {response.status_code}")
            print(f"   Respuesta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error al probar SendGrid: {e}")
        return False

def generate_report():
    """Genera un reporte de la configuraci√≥n"""
    print("\nüìä REPORTE DE CONFIGURACI√ìN")
    print("=" * 50)
    
    # Informaci√≥n del entorno
    print(f"Timestamp: {datetime.now().isoformat()}")
    print(f"Puerto configurado: {os.getenv('PORT', 'No configurado')}")
    print(f"Nivel de log: {os.getenv('LOG_LEVEL', 'info')}")
    print(f"Workers: {os.getenv('WEB_CONCURRENCY', 'auto')}")
    
    # Variables de base de datos
    print(f"\nBase de datos:")
    print(f"   Host: {os.getenv('MYSQLHOST', 'No configurado')}")
    print(f"   Database: {os.getenv('MYSQLDATABASE', 'No configurado')}")
    print(f"   User: {os.getenv('MYSQLUSER', 'No configurado')}")
    
    # Configuraci√≥n de email
    print(f"\nEmail:")
    print(f"   SendGrid API: {'‚úÖ' if os.getenv('SENDGRID_API_KEY') else '‚ùå'}")
    print(f"   SendGrid From: {'‚úÖ' if os.getenv('SENDGRID_FROM_EMAIL') else '‚ùå'}")
    print(f"   Webhook URL: {'‚úÖ' if os.getenv('EMAIL_WEBHOOK_URL') else '‚ùå'}")
    print(f"   SMTP Email: {'‚úÖ' if os.getenv('SENDER_EMAIL') else '‚ùå'}")
    print(f"   SMTP Password: {'‚úÖ' if os.getenv('SENDER_PASSWORD') else '‚ùå'}")

def main():
    """Funci√≥n principal de prueba"""
    print("üöÄ PRUEBA DE CONFIGURACI√ìN DE RAILWAY - FeedPro")
    print("=" * 60)
    
    # Obtener URL base
    base_url = input("Ingresa la URL de tu aplicaci√≥n en Railway (ej: https://tu-app.railway.app): ").strip()
    if not base_url:
        print("‚ùå URL requerida para las pruebas")
        return
    
    # Remover trailing slash
    base_url = base_url.rstrip('/')
    
    # Ejecutar pruebas
    results = []
    
    print(f"\nüéØ Probando aplicaci√≥n en: {base_url}")
    
    # Prueba 1: Health check
    results.append(("Health Check", test_health_endpoint(base_url)))
    
    # Prueba 2: Configuraci√≥n de email
    results.append(("Email Config", test_email_config()))
    
    # Prueba 3: SendGrid API
    results.append(("SendGrid API", test_sendgrid_api()))
    
    # Generar reporte
    generate_report()
    
    # Resumen final
    print(f"\nüèÅ RESUMEN DE PRUEBAS")
    print("=" * 30)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{len(results)} pruebas exitosas")
    
    if passed == len(results):
        print("üéâ ¬°Todas las pruebas pasaron! La configuraci√≥n est√° correcta.")
    else:
        print("‚ö†Ô∏è Algunas pruebas fallaron. Revisa la configuraci√≥n en Railway.")
        print("\nüí° Pasos sugeridos:")
        print("1. Verifica las variables de entorno en Railway Dashboard")
        print("2. Configura SENDGRID_API_KEY si planeas usar SendGrid")
        print("3. Revisa los logs de Railway para m√°s detalles")

if __name__ == "__main__":
    main()
